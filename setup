#!/bin/bash

set -e  # Exit on any error

# Parse command line arguments
SLIM_MODE=false
while [[ $# -gt 0 ]]; do
    case $1 in
        --slim)
            SLIM_MODE=true
            shift
            ;;
        -h|--help)
            echo "Usage: $0 [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --slim    Only configure zsh and git (assumes tools are already installed)"
            echo "  -h, --help  Show this help message"
            echo ""
            echo "Examples:"
            echo "  $0              # Full setup with tool installation"
            echo "  $0 --slim       # Configuration only (for devbox/deterministic environments)"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use -h or --help for usage information"
            exit 1
            ;;
    esac
done

echo " ____                 _ _       ____        _    __ _ _           "
echo "|  _ \ __ _ _ __   __| ( )___  |  _ \  ___ | |_ / _(_) | ___  ___ "
echo "| |_) / _\` | '_ \ / _\` |// __| | | | |/ _ \| __| |_| | |/ _ \/ __|"
echo "|  _ < (_| | | | | (_| | \__ \ | |_| | (_) | |_|  _| | |  __/\__ \\"
echo "|_| \_\__,_|_| |_|\__,_| |___/ |____/ \___/ \__|_| |_|_|\___||___/"
echo ""

if [ "$SLIM_MODE" = true ]; then
    echo "🚀 Setting up zsh and git configuration (slim mode)..."
    echo "====================================================="
else
    echo "🚀 Setting up your development environment (full mode)..."
    echo "========================================================"
fi

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
log_info() { echo -e "${BLUE}ℹ️  $1${NC}"; }
log_success() { echo -e "${GREEN}✅ $1${NC}"; }
log_warning() { echo -e "${YELLOW}⚠️  $1${NC}"; }
log_error() { echo -e "${RED}❌ $1${NC}"; }

# Check if we're on macOS (only for full mode)
if [ "$SLIM_MODE" = false ] && [[ "$OSTYPE" != "darwin"* ]]; then
    log_error "This setup script is designed for macOS. Please adapt it for your system."
    exit 1
fi

# Set up environment variables
export DOTFILES="$HOME/dotfiles"
log_info "Setting DOTFILES to: $DOTFILES"

# Full mode: Install Homebrew and tools
if [ "$SLIM_MODE" = false ]; then
    # Install Homebrew if not present
    if ! command -v brew &> /dev/null; then
        log_info "Installing Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        
        # Add Homebrew to PATH for Apple Silicon Macs
        if [[ $(uname -m) == "arm64" ]]; then
            echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
            eval "$(/opt/homebrew/bin/brew shellenv)"
        fi
        log_success "Homebrew installed successfully"
    else
        log_success "Homebrew already installed"
    fi

    # Install mise-en-place
    if ! command -v mise &> /dev/null; then
        log_info "Installing mise-en-place..."
        brew install mise
        log_success "mise-en-place installed successfully"
    else
        log_success "mise-en-place already installed"
    fi

    # Install tools via mise
    log_info "Installing development tools via mise..."
    mise install
    log_success "All tools installed successfully"

    # Install fonts for your custom prompt
    log_info "Installing fonts..."
    if [ -d "$HOME/Library/Fonts" ]; then
        # macOS Fonts directory
        cp -r "$DOTFILES/fonts/powerline-fonts/"* "$HOME/Library/Fonts/" 2>/dev/null || true
        log_success "Fonts installed to ~/Library/Fonts"
    else
        log_warning "Fonts directory not found, skipping font installation"
    fi
else
    # Slim mode: Install essential tools that are needed for zsh config
    log_info "Installing essential tools for zsh configuration..."
    
    # Install direnv (needed for zsh config)
    if ! command -v direnv &> /dev/null; then
        log_info "Installing direnv..."
        if command -v apt &> /dev/null; then
            # Ubuntu/Debian
            sudo apt update && sudo apt install -y direnv
        elif command -v snap &> /dev/null; then
            # Snap-based systems
            sudo snap install direnv
        elif command -v brew &> /dev/null; then
            # macOS with Homebrew
            brew install direnv
        else
            log_warning "Could not install direnv automatically. Please install it manually:"
            echo "  Ubuntu/Debian: sudo apt install direnv"
            echo "  Snap: sudo snap install direnv"
            echo "  macOS: brew install direnv"
        fi
    else
        log_success "direnv already installed"
    fi
    
    # Install eza (modern ls replacement)
    if ! command -v eza &> /dev/null; then
        log_info "Installing eza (modern ls replacement)..."
        if command -v apt &> /dev/null; then
            # Ubuntu/Debian
            sudo apt update && sudo apt install -y eza
        elif command -v snap &> /dev/null; then
            # Snap-based systems
            sudo snap install eza
        elif command -v brew &> /dev/null; then
            # macOS with Homebrew
            brew install eza
        else
            log_warning "Could not install eza automatically. Please install it manually:"
            echo "  Ubuntu/Debian: sudo apt install eza"
            echo "  Snap: sudo snap install eza"
            echo "  macOS: brew install eza"
        fi
    else
        log_success "eza already installed"
    fi
    
    # Install other modern CLI tools needed for aliases
    log_info "Installing modern CLI tools for enhanced aliases..."
    
    # Install bat (enhanced cat)
    if ! command -v bat &> /dev/null; then
        log_info "Installing bat (enhanced cat)..."
        if command -v apt &> /dev/null; then
            sudo apt update && sudo apt install -y bat
        elif command -v snap &> /dev/null; then
            sudo snap install bat
        elif command -v brew &> /dev/null; then
            brew install bat
        else
            log_warning "Could not install bat automatically. Please install it manually."
        fi
    else
        log_success "bat already installed"
    fi
    
    # Install fd (enhanced find)
    if ! command -v fd &> /dev/null; then
        log_info "Installing fd (enhanced find)..."
        if command -v apt &> /dev/null; then
            sudo apt update && sudo apt install -y fd-find
        elif command -v snap &> /dev/null; then
            sudo snap install fd
        elif command -v brew &> /dev/null; then
            brew install fd
        else
            log_warning "Could not install fd automatically. Please install it manually."
        fi
    else
        log_success "fd already installed"
    fi
    
    # Install ripgrep (enhanced grep)
    if ! command -v rg &> /dev/null; then
        log_info "Installing ripgrep (enhanced grep)..."
        if command -v apt &> /dev/null; then
            sudo apt update && sudo apt install -y ripgrep
        elif command -v snap &> /dev/null; then
            sudo snap install ripgrep
        elif command -v brew &> /dev/null; then
            brew install ripgrep
        else
            log_warning "Could not install ripgrep automatically. Please install it manually."
        fi
    else
        log_success "ripgrep already installed"
    fi
fi

# Set up zsh with Oh My Zsh (both modes need this)
log_info "Setting up zsh configuration..."
if [ ! -d "$HOME/.oh-my-zsh" ]; then
    log_info "Installing Oh My Zsh..."
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
    log_success "Oh My Zsh installed successfully"
else
    log_success "Oh My Zsh already installed"
fi

# Install custom plugins
log_info "Installing custom zsh plugins..."
mkdir -p "$HOME/.oh-my-zsh/custom/plugins"

# Install zsh-autosuggestions
if [ ! -d "$HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions" ]; then
    log_info "Installing zsh-autosuggestions..."
    git clone https://github.com/zsh-users/zsh-autosuggestions "$HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions"
    log_success "zsh-autosuggestions installed"
else
    log_success "zsh-autosuggestions already installed"
fi

# Install zsh-syntax-highlighting
if [ ! -d "$HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting" ]; then
    log_info "Installing zsh-syntax-highlighting..."
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "$HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"
    log_success "zsh-syntax-highlighting installed"
else
    log_success "zsh-syntax-highlighting already installed"
fi

# Install custom theme
log_info "Installing custom zsh theme..."
mkdir -p "$HOME/.oh-my-zsh/custom/themes"
if [ ! -f "$HOME/.oh-my-zsh/custom/themes/rand2.zsh-theme" ]; then
    cp "$DOTFILES/zsh/rand2.zsh-theme" "$HOME/.oh-my-zsh/custom/themes/"
    log_success "Custom theme installed"
else
    log_success "Custom theme already installed"
fi

# Copy your custom zshrc
if [ ! -f "$HOME/.zshrc" ]; then
    cp "$DOTFILES/zsh/.zshrc" "$HOME/.zshrc"
    log_success "Zsh configuration copied"
else
    log_warning ".zshrc already exists. Backing up and copying new one..."
    cp "$HOME/.zshrc" "$DOTFILES/dotfile_backups/.zshrc_backup_$(date +%Y%m%d_%H%M%S)"
    cp "$DOTFILES/zsh/.zshrc" "$HOME/.zshrc"
    log_success "Zsh configuration updated"
fi

# Full mode: Set up vim configuration
if [ "$SLIM_MODE" = false ]; then
    log_info "Setting up vim configuration..."
    if [ -f "$HOME/.vimrc" ]; then
        log_warning ".vimrc already exists. Backing up..."
        cp "$HOME/.vimrc" "$DOTFILES/dotfile_backups/.vimrc_backup_$(date +%Y%m%d_%H%M%S)"
    fi
    cp "$DOTFILES/vim/.vimrc" "$HOME/.vimrc"

    # Create vim spell directory and copy spell file
    mkdir -p "$HOME/.vim/spell/"
    cp "$DOTFILES/vim/spell/en.utf-8.spl" "$HOME/.vim/spell/"
fi

# Set up git configuration
log_info "Setting up git configuration..."
if [ -f "$HOME/.gitconfig" ]; then
    log_warning ".gitconfig already exists. Backing up..."
    cp "$HOME/.gitconfig" "$DOTFILES/dotfile_backups/.gitconfig_backup_$(date +%Y%m%d_%H%M%S)"
fi
cp "$DOTFILES/git/.gitconfig" "$HOME/.gitconfig"

# Git user setup
log_info "Setting up git user configuration..."
if ! git config --global user.name &> /dev/null || ! git config --global user.email &> /dev/null; then
    echo
    read -p "What is your git user name? [First Last] " name
    read -p "What is your git user email? " email
    git config --global user.name "$name"
    git config --global user.email "$email"
    log_success "Git user configured"
else
    log_info "Git user already configured: $(git config --global user.name) <$(git config --global user.email)>"
fi

# Full mode: macOS preferences
if [ "$SLIM_MODE" = false ]; then
    log_info "Setting up macOS preferences..."
    defaults write -g ApplePressAndHoldEnabled -bool false
    defaults write -g KeyRepeat -int 1
    defaults write -g InitialKeyRepeat -float 1.5
    chflags nohidden "$HOME/Library/"
    defaults write com.apple.Dock autohide-delay -float 0
    defaults write com.apple.dock expose-animation-duration -float 0.1
    killall Dock 2>/dev/null || true
    log_success "macOS preferences configured"
    defaults write com.microsoft.VSCode ApplePressAndHoldEnabled -bool false
    defaults write com.todesktop.230313mzl4w4u92 ApplePressAndHoldEnabled -bool false
fi

# Note: direnv is configured via the Oh My Zsh plugin in .zshrc

# Final setup
log_info "Finalizing setup..."

# Make Python scripts executable
chmod +x "$DOTFILES/zsh/batcharge.py"
chmod +x "$DOTFILES/zsh/abbr_path.py"
chmod +x "$DOTFILES/zsh/zsh_day_time.py"

# Create backup directory if it doesn't exist
mkdir -p "$DOTFILES/dotfile_backups"

# Check current shell and provide guidance
CURRENT_SHELL=$(basename "$SHELL")
if [ "$CURRENT_SHELL" != "zsh" ]; then
    log_warning "You're currently using $CURRENT_SHELL, but the configuration is for zsh."
    echo
    read -p "Would you like to change your default shell to zsh? [y/n] " yn
    case $yn in
        [Yy]* )
            log_info "Changing default shell to zsh..."
            if command -v chsh &> /dev/null; then
                # Try to change shell with sudo for devbox environments
                log_info "Attempting to change default shell to zsh..."
                if sudo chsh -s $(which zsh) $USER 2>/dev/null; then
                    log_success "Default shell changed to zsh!"
                    log_info "To complete the setup, please restart your terminal or run: zsh"
                else
                    log_warning "Could not change default shell even with sudo."
                    log_info "You can still use zsh by switching manually:"
                    echo "  1. Switch to zsh now: zsh"
                    echo "  2. Or restart your terminal later"
                fi
            else
                log_error "chsh command not found. You may need to install zsh first."
                log_info "You can manually switch to zsh with: zsh"
            fi
            ;;
        [Nn]* )
            log_info "No problem! You can complete the setup by:"
            echo "  1. Switch to zsh temporarily: zsh"
            echo "  2. Change default shell later: chsh -s $(which zsh)"
            echo "  3. Then run: source ~/.zshrc"
            ;;
        * )
            log_warning "Invalid response. You can complete the setup by:"
            echo "  1. Switch to zsh temporarily: zsh"
            echo "  2. Change default shell later: chsh -s $(which zsh)"
            echo "  3. Then run: source ~/.zshrc"
            ;;
    esac
else
    log_success "You're already using zsh - perfect!"
    log_info "You can now run: source ~/.zshrc"
fi

echo ""
if [ "$SLIM_MODE" = true ]; then
    echo "🎉 Slim setup completed successfully!"
    echo "===================================="
    echo
    echo "Next steps:"
    echo "1. Restart your terminal or run: source ~/.zshrc"
    echo "2. Your custom zsh theme should now be active"
    echo
    echo "What was configured:"
    echo "  ✅ Custom zsh theme (rand2)"
    echo "  ✅ Essential zsh plugins"
    echo "  ✅ Git configuration"
    echo "  ✅ Python prompt scripts"
    echo
    echo "Note: This slim setup assumes tools are already available in your environment."
    echo "Use './setup' for the full setup if you need to install tools."
else
    echo "🎉 Full setup completed successfully!"
    echo "===================================="
    echo
    echo "Next steps:"
    echo "1. Restart your terminal or run: source ~/.zshrc"
    echo "2. Your custom zsh theme should now be active"
    echo "3. Use 'mise' to manage development tools"
    echo "4. Add project-specific tools with: mise use <tool>@<version>"
    echo
    echo "Available commands:"
    echo "  mise ls          - List installed tools"
    echo "  mise use node@20 - Use Node.js 20 in current directory"
    echo "  mise use bun@latest - Use latest Bun in current directory"
    echo "  mise x -- node   - Run node with current directory's version"
    echo "  mise sync        - Install all tools from mise.toml"
    echo
    echo "Custom zsh features:"
    echo "  - Custom 'rand2' theme with battery status and git info"
    echo "  - zsh-autosuggestions for command suggestions"
    echo "  - zsh-syntax-highlighting for syntax highlighting"
    echo "  - Modern CLI tool aliases (exa, bat, fd, ripgrep)"
    echo
    echo "Welcome to your new development environment! 🚀"
fi
