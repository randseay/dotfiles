#!/bin/bash

set -e  # Exit on any error

# Parse command line arguments
SLIM_MODE=false
while [[ $# -gt 0 ]]; do
    case $1 in
        --slim)
            SLIM_MODE=true
            shift
            ;;
        -h|--help)
            echo "Usage: $0 [OPTIONS]"
            echo ""
            echo "Options:"
            echo "  --slim    Only configure zsh and git (assumes tools are already installed)"
            echo "  -h, --help  Show this help message"
            echo ""
            echo "Examples:"
            echo "  $0              # Full setup with tool installation"
            echo "  $0 --slim       # Configuration only (for devbox/deterministic environments)"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use -h or --help for usage information"
            exit 1
            ;;
    esac
done

echo " ____                 _ _       ____        _    __ _ _           "
echo "|  _ \ __ _ _ __   __| ( )___  |  _ \  ___ | |_ / _(_) | ___  ___ "
echo "| |_) / _\` | '_ \ / _\` |// __| | | | |/ _ \| __| |_| | |/ _ \/ __|"
echo "|  _ < (_| | | | | (_| | \__ \ | |_| | (_) | |_|  _| | |  __/\__ \\"
echo "|_| \_\__,_|_| |_|\__,_| |___/ |____/ \___/ \__|_| |_|_|\___||___/"
echo ""

if [ "$SLIM_MODE" = true ]; then
    echo "🚀 Setting up zsh and git configuration (slim mode)..."
    echo "====================================================="
else
    echo "🚀 Setting up your development environment (full mode)..."
    echo "========================================================"
fi

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Helper functions
log_info() { echo -e "${BLUE}ℹ️  $1${NC}"; }
log_success() { echo -e "${GREEN}✅ $1${NC}"; }
log_warning() { echo -e "${YELLOW}⚠️  $1${NC}"; }
log_error() { echo -e "${RED}❌ $1${NC}"; }

# Check if we're on macOS (only for full mode)
if [ "$SLIM_MODE" = false ] && [[ "$OSTYPE" != "darwin"* ]]; then
    log_error "This setup script is designed for macOS. Please adapt it for your system."
    exit 1
fi

# Set up environment variables
export DOTFILES="$HOME/dotfiles"
log_info "Setting DOTFILES to: $DOTFILES"

# Full mode: Install Homebrew and tools
if [ "$SLIM_MODE" = false ]; then
    # Install Homebrew if not present
    if ! command -v brew &> /dev/null; then
        log_info "Installing Homebrew..."
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
        
        # Add Homebrew to PATH for Apple Silicon Macs
        if [[ $(uname -m) == "arm64" ]]; then
            echo 'eval "$(/opt/homebrew/bin/brew shellenv)"' >> ~/.zprofile
            eval "$(/opt/homebrew/bin/brew shellenv)"
        fi
        log_success "Homebrew installed successfully"
    else
        log_success "Homebrew already installed"
    fi

    # Install mise-en-place
    if ! command -v mise &> /dev/null; then
        log_info "Installing mise-en-place..."
        brew install mise
        log_success "mise-en-place installed successfully"
    else
        log_success "mise-en-place already installed"
    fi

    # Install tools via mise
    log_info "Installing development tools via mise..."
    mise install
    log_success "All tools installed successfully"

    # Install fonts for your custom prompt
    log_info "Installing fonts..."
    if [ -d "$HOME/Library/Fonts" ]; then
        # macOS Fonts directory
        cp -r "$DOTFILES/fonts/powerline-fonts/"* "$HOME/Library/Fonts/" 2>/dev/null || true
        log_success "Fonts installed to ~/Library/Fonts"
    else
        log_warning "Fonts directory not found, skipping font installation"
    fi
fi

# Set up zsh with Oh My Zsh (both modes need this)
log_info "Setting up zsh configuration..."
if [ ! -d "$HOME/.oh-my-zsh" ]; then
    log_info "Installing Oh My Zsh..."
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
    log_success "Oh My Zsh installed successfully"
else
    log_success "Oh My Zsh already installed"
fi

# Install custom plugins
log_info "Installing custom zsh plugins..."
mkdir -p "$HOME/.oh-my-zsh/custom/plugins"

# Install zsh-autosuggestions
if [ ! -d "$HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions" ]; then
    log_info "Installing zsh-autosuggestions..."
    git clone https://github.com/zsh-users/zsh-autosuggestions "$HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions"
    log_success "zsh-autosuggestions installed"
else
    log_success "zsh-autosuggestions already installed"
fi

# Install zsh-syntax-highlighting
if [ ! -d "$HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting" ]; then
    log_info "Installing zsh-syntax-highlighting..."
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "$HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"
    log_success "zsh-syntax-highlighting installed"
else
    log_success "zsh-syntax-highlighting already installed"
fi

# Install custom theme
log_info "Installing custom zsh theme..."
mkdir -p "$HOME/.oh-my-zsh/custom/themes"
if [ ! -f "$HOME/.oh-my-zsh/custom/themes/rand2.zsh-theme" ]; then
    cp "$DOTFILES/zsh/rand2.zsh-theme" "$HOME/.oh-my-zsh/custom/themes/"
    log_success "Custom theme installed"
else
    log_success "Custom theme already installed"
fi

# Link your custom zshrc
if [ ! -f "$HOME/.zshrc" ]; then
    ln -sfv "$DOTFILES/zsh/.zshrc" "$HOME/.zshrc"
    log_success "Zsh configuration linked"
else
    log_warning ".zshrc already exists. Backing up and linking new one..."
    cp "$HOME/.zshrc" "$DOTFILES/dotfile_backups/.zshrc_backup_$(date +%Y%m%d_%H%M%S)"
    ln -sfv "$DOTFILES/zsh/.zshrc" "$HOME/.zshrc"
    log_success "Zsh configuration updated"
fi

# Full mode: Set up vim configuration
if [ "$SLIM_MODE" = false ]; then
    log_info "Setting up vim configuration..."
    if [ -f "$HOME/.vimrc" ]; then
        log_warning ".vimrc already exists. Backing up..."
        cp "$HOME/.vimrc" "$DOTFILES/dotfile_backups/.vimrc_backup_$(date +%Y%m%d_%H%M%S)"
    fi
    ln -sfv "$DOTFILES/vim/.vimrc" "$HOME/.vimrc"

    # Create vim spell directory and link spell file
    mkdir -p "$HOME/.vim/spell/"
    ln -sfv "$DOTFILES/vim/spell/en.utf-8.spl" "$HOME/.vim/spell/"
fi

# Set up git configuration
log_info "Setting up git configuration..."
if [ -f "$HOME/.gitconfig" ]; then
    log_warning ".gitconfig already exists. Backing up..."
    cp "$HOME/.gitconfig" "$DOTFILES/dotfile_backups/.gitconfig_backup_$(date +%Y%m%d_%H%M%S)"
fi
ln -sfv "$DOTFILES/git/.gitconfig" "$HOME/.gitconfig"

# Git user setup
log_info "Setting up git user configuration..."
if ! git config --global user.name &> /dev/null || ! git config --global user.email &> /dev/null; then
    echo
    read -p "What is your git user name? [First Last] " name
    read -p "What is your git user email? " email
    git config --global user.name "$name"
    git config --global user.email "$email"
    log_success "Git user configured"
else
    log_info "Git user already configured: $(git config --global user.name) <$(git config --global user.email)>"
fi

# Full mode: macOS preferences
if [ "$SLIM_MODE" = false ]; then
    log_info "Setting up macOS preferences..."
    defaults write -g ApplePressAndHoldEnabled -bool false
    defaults write -g KeyRepeat -int 1
    defaults write -g InitialKeyRepeat -float 1.5
    chflags nohidden "$HOME/Library/"
    defaults write com.apple.Dock autohide-delay -float 0
    defaults write com.apple.dock expose-animation-duration -float 0.1
    killall Dock 2>/dev/null || true
    log_success "macOS preferences configured"
fi

# Note: direnv is configured via the Oh My Zsh plugin in .zshrc

# Final setup
log_info "Finalizing setup..."

# Make Python scripts executable
chmod +x "$DOTFILES/zsh/batcharge.py"
chmod +x "$DOTFILES/zsh/abbr_path.py"
chmod +x "$DOTFILES/zsh/zsh_day_time.py"

# Create backup directory if it doesn't exist
mkdir -p "$DOTFILES/dotfile_backups"

echo ""
if [ "$SLIM_MODE" = true ]; then
    echo "🎉 Slim setup completed successfully!"
    echo "===================================="
    echo
    echo "Next steps:"
    echo "1. Restart your terminal or run: source ~/.zshrc"
    echo "2. Your custom zsh theme should now be active"
    echo
    echo "What was configured:"
    echo "  ✅ Custom zsh theme (rand2)"
    echo "  ✅ Essential zsh plugins"
    echo "  ✅ Git configuration"
    echo "  ✅ Python prompt scripts"
    echo
    echo "Note: This slim setup assumes tools are already available in your environment."
    echo "Use './setup' for the full setup if you need to install tools."
else
    echo "🎉 Full setup completed successfully!"
    echo "===================================="
    echo
    echo "Next steps:"
    echo "1. Restart your terminal or run: source ~/.zshrc"
    echo "2. Your custom zsh theme should now be active"
    echo "3. Use 'mise' to manage development tools"
    echo "4. Add project-specific tools with: mise use <tool>@<version>"
    echo
    echo "Available commands:"
    echo "  mise ls          - List installed tools"
    echo "  mise use node@20 - Use Node.js 20 in current directory"
    echo "  mise use bun@latest - Use latest Bun in current directory"
    echo "  mise x -- node   - Run node with current directory's version"
    echo "  mise sync        - Install all tools from mise.toml"
    echo
    echo "Custom zsh features:"
    echo "  - Custom 'rand2' theme with battery status and git info"
    echo "  - zsh-autosuggestions for command suggestions"
    echo "  - zsh-syntax-highlighting for syntax highlighting"
    echo "  - Modern CLI tool aliases (exa, bat, fd, ripgrep)"
    echo
    echo "Welcome to your new development environment! 🚀"
fi
